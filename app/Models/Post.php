<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\HasMany;

class Post extends Model
{
    use HasFactory;

//    protected $guarded = ['id']; //wszytsko jest fillable oprócz id
    protected $fillable = ['title', 'excerpt', 'body']; // pozwala tworzyć nowe obiekty z poziomu tinkera w następujący sposób: php artisan tinker     Post::create(['title' => 'cos', 'excerpt' => 'cos])

    //to pozwoli za każdym razem wczytać te 2 dane przy zapytaniach SQl - przydatne bo rozwiazuje problem n+1 ale nie zawsze musimy chcieć te dane pobrać także używać z rozsądkiem - alternatywa jest w web.php 'posts' => $author->posts->load(['category', 'author'])
    protected $with = ['category', 'author'];

    //to jest potrzebne, żeby znaleźć rekord z bazy po slug-u gdy w Route mamy {post} a nie {post:slug}
    public function getRouteKeyName()
    {
//        return parent::getRouteKeyName(); // TODO: Change the autogenerated stub
        return 'slug';
    }

    public function scopeFilter(Builder $query, array $filters): void
    {
//        Post::newQuery()->filter()
        $query->when(
            $filters['search'] ?? false,
            fn ($query, $search) =>
            $query->where(
                fn ($query) =>
                $query->where('title', 'like', '%' . $search . '%')
                ->orWhere('body', 'like', '%' . $search . '%')
            )
        );

        $query->when(
            $filters['category'] ?? false,
            fn ($query, $category) =>
            $query->whereHas(
                'category',
                fn ($query) =>
                $query->where('slug', $category)
            )
        );

        $query->when(
            $filters['author'] ?? false,
            fn ($query, $author) =>
            $query->whereHas(
                'author',
                fn ($query) =>
                $query->where('username', strtolower($author)),
            )
        );
    }

    public function comments(): HasMany
    { // Laravel zakłada, że klucz obcy będzie nazywał się user_id - nazwaMetody_id
        return $this->hasMany(Comment::class);
    }

    public function category(): BelongsTo
    {
        return $this->belongsTo(Category::class);
    }

    public function author(): BelongsTo
    { // Laravel zakłada, że klucz obcy będzie nazywał się user_id - nazwaMetody_id
        return $this->belongsTo(User::class, 'user_id');
    }
}
